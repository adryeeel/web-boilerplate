@use "sass:map";

$DEFAULT_DELAY: 0ms;
$DEFAULT_DURATION: 350ms;
$DEFAULT_FILL_MODE: forwards;

// TODO: Documentar e refatorar.
// TODO: Develop mixin to combine animations.
// TODO: Config map parameter to set animation settings.

//  

/**
* @Mixin to set fade animation to an element.
*
* @Param $anim-config: animation shorthand configurations. This parameter 
* format must be the same as the animation property shorthand, excluding the 
* animation-name value.
*
*/
@mixin fade($way: in, $anim-config: 300ms linear) {
	$ways: (
		in: (
			from: 0,
			to: 1,
		),
		out: (
			from: 1,
			to: 0,
		),
	);

	@keyframes fade {
		from {
			opacity: map.get($directions, $ways, from);
		}
		to {
			opacity: map.get($directions, $ways, to);
		}
	}

	animation: fade $anim-config;
}

/**
* @Mixin to set slide animation to an element.
*
* @Param $anim-config: animation shorthand configurations. This parameter 
* format must be the same as the animation property shorthand, excluding the 
* animation-name value.
*
*/
@mixin slide($direction: in left, $anim-config: 500ms ease-in-out forwards) {
	$directions: (
		in top:
			(
				from: 0 -120%,
				to: 0 0,
			),
		in right:
			(
				from: 120% 0,
				to: 0 0,
			),
		in bottom:
			(
				from: 0 120%,
				to: 0 0,
			),
		in left:
			(
				from: -120% 0,
				to: 0 0,
			),
		out top:
			(
				from: 0 0,
				to: 0 -120%,
			),
		out right:
			(
				from: 0 0,
				to: 120% 0,
			),
		out bottom:
			(
				from: 0 0,
				to: 0 120%,
			),
		out left:
			(
				from: 0 0,
				to: -120% 0,
			)
	);

	@keyframes slide {
		from {
			translate: map.get($directions, $direction, from);
		}
		to {
			translate: map.get($directions, $direction, to);
		}
	}

	animation: slide $anim-config;
}

/**
* @Mixin to set floating animation to an element.
*
* @Param $anim-config: animation shorthand configurations. This parameter 
* format must be the same as the animation property shorthand, excluding the 
* animation-name value.
*
*/
@mixin floating($orientation: vertical, $distance: 10%, $anim-config: 2s ease infinite) {
	$orientations: (
		horizontal: $distance 0,
		vertical: 0 $distance,
	);

	@keyframes floating {
		from {
			translate: 0 0;
		}
		50% {
			translate: map.get($orientations, $orientation);
		}
		to {
			translate: 0 0;
		}
	}

	animation: floating $anim-config;
}

/**
* @Mixin to set progress animation to an element.
*	
* @Param $anim-config: animation shorthand configurations. This parameter 
* format must be the same as the animation property shorthand, excluding the 
* animation-name value.
*
*/
@mixin progress($anim-config: 3s linear forwards) {
	@keyframes progress {
		from {
			transform: scaleX(0);
		}
		to {
			transform: scaleX(1);
		}
	}

	transform-origin: left;
	animation: progress $anim-config;
}

/**
* @Mixin to set no-no animation to an element.
*
* @Param $anim-config: animation shorthand configurations. This parameter 
* format must be the same as the animation property shorthand, excluding the 
* animation-name value.
*
*/
@mixin no-no($anim-config: 150ms 2 linear) {
	@keyframes no-no {
		0% {
			translate: 0 0;
		}
		25% {
			translate: 1% 0;
		}
		75% {
			translate: -1% 0;
		}
		100% {
			translate: 0 0;
		}
	}

	animation: no-no $anim-config;
}

/**
* @Mixin to set spin animation to an element.
*
* @Param $anim-config: animation shorthand configurations. This parameter 
* format must be the same as the animation property shorthand, excluding the 
* animation-name value.
*
*/
@mixin spin($anim-config: 600ms linear infinite) {
	@keyframes spin {
		to {
			rotate: 1turn;
		}
	}

	animation: spin $anim-config;
}
