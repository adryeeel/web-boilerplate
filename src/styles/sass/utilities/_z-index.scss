@use "sass:list";
@use "sass:map";

// System to manage z-index values.

// The z-index value is assigned based on its position (index value) in the elevation map below. The last element in the list has the higher z-index value because that element have higher index value in the map.

// The system uses a elevation map to organize the page elements like a tree. The z-index value is defined based on the element's index position. This value is found and assigned to the element's z-index CSS property.

// In the map, elements must be positioned in ascending order, that is: elements with the highest z-index must be defined last in the map; elements with smaller z-index, must be defined first in the map.

// Any time an element needs a z-index value, the elevation map needs to be modified to include that element. Once included, the system can determine the value for its z-index based on its position in the map.

// Each element in the elevation map is another map. Its childrens are nested in the parent. Each parent must create a z-index context so that the z-index of its children are relative to the parents context. So, if you define a z-index value for a children, you need to define for the parent too.

// With this structure, it's possible to keep some control with the z-index values used and not end up with properties of type `z-index: 9999`.

$elements-tree: (
	footer: (),
	main: (),
	header: (),
);

@function foundIndexValue($layers-list) {
	$found-index: null;
	$elevation-map: $elements-tree;

	@each $key in $layers-list {
		@if (type-of($elevation-map) == "map") {
			$found-index: index(map.keys($elevation-map), $key);
			$elevation-map: map.get($elevation-map, $key);
		}
		@else {
			$found-index: index($elevation-map, $key);
		}

		@if ($found-index == null) {
			@error "'#{$key}' is not part of the elevation map: `#{$elements-tree}`";
		}
	}

	@return $found-index;
}

@mixin layout-layer($position: relative, $layers...) {
	$valid-positions-list: relative, absolute, fixed, sticky;

	@if (list.index($valid-positions-list, $position) == null) {
		@error "Position '#{$position}' is invalid.";
	}

	position: $position;
	z-index: foundIndexValue($layers);
}
