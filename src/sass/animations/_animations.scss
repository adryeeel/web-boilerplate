@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:string";

@use "@sass-utils/functions";
@use "@sass-utils/strings";

// TODO: Documentar; Error handling.

/**
* @Mixin to set fade animation to an element.
*
* @Param { String } $way: in | out
* @Param { List } $anim-config: animation shorthand values, excluding 
* animation-name
*
*/
@mixin fade($way: in, $anim-config: 300ms linear) {
	$ways: (
		in: (
			from: 0,
			to: 1,
		),
		out: (
			from: 1,
			to: 0,
		),
	);

	$animation-name: fade - $way;

	@keyframes #{$animation-name} {
		from {
			opacity: map.get($ways, $way, from);
		}
		to {
			opacity: map.get($ways, $way, to);
		}
	}

	animation: $animation-name $anim-config;
}

/**
* @Mixin to set slide animation to an element.
*
* @Param { List } $direction: [in | out] [top | right | bottom | left]
* @Param { List } $anim-config: animation shorthand values, excluding 
* animation-name
*
*/
@mixin slide($direction: in left, $anim-config: 500ms ease-in-out forwards) {
	$directions: (
		in top:
			(
				from: 0 -120%,
				to: 0 0,
			),
		in right:
			(
				from: 120% 0,
				to: 0 0,
			),
		in bottom:
			(
				from: 0 120%,
				to: 0 0,
			),
		in left:
			(
				from: -120% 0,
				to: 0 0,
			),
		out top:
			(
				from: 0 0,
				to: 0 -120%,
			),
		out right:
			(
				from: 0 0,
				to: 120% 0,
			),
		out bottom:
			(
				from: 0 0,
				to: 0 120%,
			),
		out left:
			(
				from: 0 0,
				to: -120% 0,
			)
	);

	$sufix: strings.join($direction, "-");
	$animation-name: slide - string.unquote($sufix);

	@keyframes #{$animation-name} {
		from {
			translate: map.get($directions, $direction, from);
		}
		to {
			translate: map.get($directions, $direction, to);
		}
	}

	animation: $animation-name $anim-config;
}

/**
* @Mixin to set floating animation to an element.
*
* @Param { String } $orientation: vertical | horizontal.
* @Param { Number + CSS unit } $distance: distance to be floated.
* @Param { List } $anim-config: animation shorthand values, excluding 
* animation-name.
*
*/
@mixin floating(
	$orientation: vertical,
	$distance: 10%,
	$anim-config: 2s ease infinite
) {
	$orientations: (
		horizontal: $distance 0,
		vertical: 0 $distance,
	);

	@keyframes floating {
		from {
			translate: 0 0;
		}
		50% {
			translate: map.get($orientations, $orientation);
		}
		to {
			translate: 0 0;
		}
	}

	animation: floating $anim-config;
}

/**
* @Mixin to set progress animation to an element.
*	
* @Param { List } $anim-config: animation shorthand values, excluding 
* animation-name
*
*/
@mixin progress($anim-config: 3s linear forwards) {
	@keyframes progress {
		from {
			transform: scaleX(0);
		}
		to {
			transform: scaleX(1);
		}
	}

	transform-origin: left;
	animation: progress $anim-config;
}

/**
* @Mixin to set no-no animation to an element.
*
* @Param { List } $anim-config: animation shorthand values, excluding 
* animation-name
*
*/
@mixin no-no($anim-config: 150ms 2 linear) {
	@keyframes no-no {
		0% {
			translate: 0 0;
		}
		25% {
			translate: 1% 0;
		}
		75% {
			translate: -1% 0;
		}
		100% {
			translate: 0 0;
		}
	}

	animation: no-no $anim-config;
}

/**
* @Mixin to set spin animation to an element.
*
* @Param { List } $anim-config: animation shorthand values, excluding 
* animation-name
*
*/
@mixin spin($anim-config: 600ms linear infinite) {
	@keyframes spin {
		to {
			rotate: 1turn;
		}
	}

	animation: spin $anim-config;
}

/**
* @Mixin to auxiliate the combine @mixin.
*
* @Param { List } $animation-list: ;
*
*/
@function -get-animation-list-shorthand($animation-list) {
	$COMPOUND_ANIMATION_NAMES: slide, fade;
	$animation-shorthand-list: ();

	@each $animation-map in $animation-list {
		$mixin-name: map.get($animation-map, "name");

		$animation-name: $mixin-name;
		$animation-parameters: map.get($animation-map, "parameters");

		@if functions.list-includes($COMPOUND_ANIMATION_NAMES, $mixin-name) {
			$sufix: list.nth($animation-parameters, 1);

			@if list.length($sufix) > 1 {
				$sufix: strings.join($sufix, "-");
			}

			$animation-name: $animation-name - string.unquote($sufix);
		}

		$animation-shorthand: $animation-name list.nth($animation-parameters, -1);

		$animation-shorthand-list: list.append(
			$animation-shorthand-list,
			$animation-shorthand,
			$separator: "comma"
		);
	}

	@return $animation-shorthand-list;
}

/**
* @Mixin to set spin animation to an element.
*
* @Param { Argument List } $animations: name: [ animation name ], parameters: (parameters used to configure the animation, separated by comma.)
*
*/
@mixin combine($animations...) {
	$animation-shorthand-list: -get-animation-list-shorthand($animations);

	@each $animation-map in $animations {
		$mixin-name: map.get($animation-map, "name");
		$animation-parameters: map.get($animation-map, "parameters");

		@if $mixin-name == slide {
			@include slide($animation-parameters...);
		}

		@if $mixin-name == fade {
			@include fade($animation-parameters...);
		}
	}

	animation: $animation-shorthand-list;
}
